{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","TemperatureInput","handleChange","e","_this","onTemperatureChange","target","value","scale","type","this","onChange","temperature","htmlFor","toUpperCase","React","Component","toCelsius","temp","console","log","toFahrenheit","toKelvin","tryConvert","convert","input","parseFloat","Number","isNaN","Math","round","toString","TemperatureBoard","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleCelsiusChange","bind","assertThisInitialized","handleFahrenheitChange","handleKelvinChange","setState","celsius","fahrenheit","kelvin","App_TemperatureInput","App","App_TemperatureBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51383267.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Header(props){\n  return (\n      <div className=\"header\">\n        <h1> Temperature Converter </h1>\n        <p> Convert between Celsius, Fahrenheit and Kelvin </p>\n      </div>\n    )\n}\n\nclass TemperatureInput extends React.Component { //functional compenents use props (pass in props as an argument). class componenets use this.props\n  handleChange = (e) => {\n    this.props.onTemperatureChange(e.target.value, this.props.scale);\n  }\n\n    render() {\n      return (\n        <div className=\"temperatureContainer\">\n          <input type=\"text\" scale={this.props.scale} onChange={this.handleChange} value={this.props.temperature}/> <label htmlFor={this.props.scale}>{this.props.scale === \"k\" ? \"\" : \"\\u00b0\"}{this.props.scale.toUpperCase()}</label>\n        </div>\n      );\n    }\n}\n\nfunction toCelsius(temp, scale){\n  console.log(temp, scale);\n  if (scale === \"f\"){\n    return (temp-32)*5/9;\n  } else if (scale === \"k\") {\n    return temp - 273.15;\n  }\n  \n}\n\nfunction toFahrenheit(temp, scale){\n  if (scale === \"c\"){\n    return (temp / 5 * 9) + 32;\n  } else if (scale === \"k\") {\n    return temp*9/5 - 459.67\n  }\n  \n}\n\nfunction toKelvin(temp, scale){\n  if (scale===\"c\"){\n    return temp+273;\n  } else if (scale===\"f\"){\n    return (temp+459.67)*5/9;\n  }\n  \n}\n\nfunction tryConvert(temp, convert, scale){\n  const input = parseFloat(temp);\n  if (Number.isNaN(input)){\n    return \"\";\n  } else {\n    return (Math.round(convert(input, scale)*100)/100).toString(); // math.round returns nearest integer, so multiplying like this rounds to 2dp\n  }\n}\n\nclass TemperatureBoard extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      temperature: \"\",\n      scale: \"c\",\n    };\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.handleKelvinChange = this.handleKelvinChange.bind(this);\n  }\n\n  handleCelsiusChange(temperature){\n    this.setState({scale:\"c\", temperature});\n  }\n\n  handleFahrenheitChange(temperature){\n    this.setState({scale:\"f\", temperature});\n  }\n\n  handleKelvinChange(temperature){\n    this.setState({scale:\"k\", temperature});\n  }\n\n  handleChange = (e) => {\n    console.log(e.target.value);\n  };\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale !== \"c\" ? tryConvert(temperature, toCelsius, scale) : temperature;\n    const fahrenheit = scale !== \"f\" ? tryConvert(temperature, toFahrenheit, scale) : temperature;\n    const kelvin = scale !== \"k\" ? tryConvert(temperature, toKelvin, scale) : temperature;\n    return (\n      <div className=\"temperatureBoard\">\n        <TemperatureInput scale=\"c\" temperature={celsius} onTemperatureChange={this.handleCelsiusChange}/>\n        <TemperatureInput scale=\"f\" temperature={fahrenheit} onTemperatureChange={this.handleFahrenheitChange}/>\n        <TemperatureInput scale=\"k\" temperature={kelvin} onTemperatureChange={this.handleKelvinChange}/>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <TemperatureBoard />\n      </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}